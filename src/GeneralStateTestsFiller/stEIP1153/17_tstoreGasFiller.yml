# 17
# Tstore arbitrary value in arbitrary slot costs 100 gas : TSTORE(x, y) costs 100 gas.
#
# Expect storage slot 0 to be 100. Cost of warm sstore of dirty slot.
# Expect storage slot 1 to be 100. Cost of tstore.
# Expect storage slot 2 to be 1. tstore gas and sstore gas should be equal.
# Expect storage slot 5 to be 2 from the last sstore.

17_tstoreGas:
  _info:
    comment: Tstore arbitrary value in arbitrary slot costs 100 gas.

  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: 0x20000
    currentNumber: 1
    currentTimestamp: 1000
    currentGasLimit: 0x10000000000000
    previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6
    currentBaseFee: 10

  pre:
    000000000000000000000000000000000000000A:
      balance: 1000000000000000000
      nonce: 0
      code: |
        :yul {
          let extraOpcodes := 8

          // calculate warm dirty sstore gas
          sstore(5, 1)
          let g1 := gas()
          sstore(5, 2)
          let g2 := gas()
          sstore(0, sub(sub(g1, g2), extraOpcodes))
          
          // calculate tstore gas
          let g3 := gas()
          verbatim_2i_0o(hex"b4", 0, 3)
          let g4 := gas()
          sstore(1, sub(sub(g3, g4), extraOpcodes))

          sstore(2, eq(sub(g3, g4),sub(g1, g2)))
        }
      storage:
        0x05: 5
    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: 1000000000000000000000
      code: "0x"
      nonce: 0
      storage: {}

  transaction:
    data:
      - data: 0x
        accessList: []
    gasLimit:
      - "400000"
    nonce: 0
    to: 000000000000000000000000000000000000000A
    value:
      - 0
    secretKey: "45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8"
    maxPriorityFeePerGas: 0
    maxFeePerGas: 2000

  expect:
    - network:
        - "Merge+1153"
      result:
        000000000000000000000000000000000000000A:
          storage:
            0x00: 100
            0x01: 100
            0x02: 0x01
            0x05: 0x02
