# Check the gas cost of accessing the coinbase account using different opcodes

coinbaseWarmAccountCallGas:

  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: '0x20000'
    currentGasLimit: "100000000"
    currentNumber: "1"
    currentTimestamp: "1000"
    previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6


  pre:
    cccccccccccccccccccccccccccccccccccccccc:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: |
        :yul
        {
           // Save the coinbase value 
           let cb := coinbase()
           
           // Minimum gas spent on the measurement, which changes depending on
           // the tested opcode
           let measureGas := 12
           let gas0, gas1

           // We can only check the gas of one opcode per transaction,
           // because the first check adds the account to the
           // 'accessed_addresses' list.
           switch calldataload(4)
           case 0 {
             // EXTCODESIZE
             gas0 := gas()
             pop(extcodesize(cb))
             gas1 := gas()
           }
           case 1 {
             // EXTCODECOPY
             measureGas := add(measureGas, 7)
             gas0 := gas()
             extcodecopy(cb, 0, 0, 0)
             gas1 := gas()
           }
           case 2 {
             // EXTCODEHASH
             gas0 := gas()
             pop(extcodehash(cb))
             gas1 := gas()
           }
           case 3 {
             // BALANCE
             gas0 := gas()
             pop(balance(cb))
             gas1 := gas()
           }
           case 4 {
             // CALL
             measureGas := add(measureGas, 18)
             gas0 := gas()
             pop(call(10000, cb, 0, 0, 0, 0, 0))
             gas1 := gas()
           }
           case 5 {
             // CALLCODE
             measureGas := add(measureGas, 18)
             gas0 := gas()
             pop(callcode(10000, cb, 0, 0, 0, 0, 0))
             gas1 := gas()
           }
           case 6 {
             // DELEGATECALL
             measureGas := add(measureGas, 15)
             gas0 := gas()
             pop(delegatecall(10000, cb, 0, 0, 0, 0))
             gas1 := gas()
           }
           case 7 {
             // STATICCALL
             measureGas := add(measureGas, 15)
             gas0 := gas()
             pop(staticcall(10000, cb, 0, 0, 0, 0))
             gas1 := gas()
           }
           default {
             revert(0, 0)
           }

           // Save the measured gas
           sstore(0, sub(sub(gas0, gas1), measureGas)) 
           
        }
      nonce: 1
      storage: {}
    2adc25665018aa1fe0e6bc666dac8fc2697ff9ba:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: '0x00'
      nonce: 1
      storage: {}
    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: '0x'
      nonce: 1
      storage: {}


  transaction:
    data:
    # EXTCODESIZE
    - :abi f(uint) 0
    # EXTCODECOPY
    - :abi f(uint) 1
    # EXTCODEHASH
    - :abi f(uint) 2
    # BALANCE
    - :abi f(uint) 3
    # CALL
    - :abi f(uint) 4
    # CALLCODE
    - :abi f(uint) 5
    # DELEGATECALL
    - :abi f(uint) 6
    # STATICCALL
    - :abi f(uint) 7
    gasLimit:
    - 80000
    gasPrice: 10
    nonce: 1
    to: cccccccccccccccccccccccccccccccccccccccc
    value:
    - 0
    secretKey: '45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8'



  expect:
    - network:
        - '>=Shanghai'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
            # Coinbase access post-Shanghai is warm
            0x0:  100
    - network:
        - 'Berlin'
        - 'London'
        - 'Merge'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
            # Coinbase access pre-Shanghai is cold
            0x0:  2600
