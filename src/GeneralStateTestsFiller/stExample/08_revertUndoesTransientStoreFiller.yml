# 08
# Revert undoes the transient storage write from the failed call: TSTORE(x, y), CALL(self, ...), TSTORE(x, z), REVERT, TLOAD(x) returns y
#
# Expect slot 0 to have 10 from the first tstore & tload.
# Expect slot 1 to have 10 after the return from the call.
# Expect slot 2 to have 0 (for unsuccessful call).

08_revertUndoesTransientStore:
  _info:
    comment: Revert undoes the transient storage writes from a call.

  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: 0x20000
    currentNumber: 1
    currentTimestamp: 1000
    currentGasLimit: 0x10000000000000
    previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6
    currentBaseFee: 10

  pre:
    000000000000000000000000000000000000000A:
      balance: 1000000000000000000
      nonce: 0
      code: |
        :yul {
          switch selector()

          // doStoreAndRevert() {
          case 0xe2da2eb0 {
            doStoreAndRevert()
          }
          
          // doLoad()
          case 0x43ac1c39 {
            doLoad()
          }

          // doReenter()
          case 0x3f371692 {
            doReenter()
          }

          default {
            sstore(2, 1)
          }

          function doStoreAndRevert() {
            verbatim_2i_0o(hex"b4", 0, 11)
            revert(0, 0)
          }

          function doLoad() {
            let v := verbatim_1i_1o(hex"b3", 0)
            sstore(1, v)
          }

          function doReenter() {
            // tstore
            verbatim_2i_0o(hex"b4", 0, 10)

            // tload
            let v := verbatim_1i_1o(hex"b3", 0)
            sstore(0, v)

            mstore(0, hex"e2da2eb0")
            let success := call(0xffff, 0x000000000000000000000000000000000000000A, 0, 0, 32, 0, 0)
            sstore(2, success)

            doLoad()
          } 

          function selector() -> s {
            let value := calldataload(0)
            s := div(value, 0x100000000000000000000000000000000000000000000000000000000)
          }
        }
      storage: {}
    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: 1000000000000000000000
      code: "0x"
      nonce: 0
      storage: {}

  transaction:
    data:
      - data: :abi doReenter()
        accessList: []
    gasLimit:
      - "400000"
    nonce: 0
    to: 000000000000000000000000000000000000000A
    value:
      - 0
    secretKey: "45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8"
    maxPriorityFeePerGas: 0
    maxFeePerGas: 2000

  expect:
    - indexes:
        data: !!int -1
        gas: !!int -1
        value: !!int -1

      network:
        - ">=London"
      result:
        000000000000000000000000000000000000000A:
          storage:
            # expect 10 at slot 0
            # expect 10 at slot 1
            # expect 0 (unsuccessful call) at slot 0
            0x00: 10
            0x01: 10
            0x02: 0
