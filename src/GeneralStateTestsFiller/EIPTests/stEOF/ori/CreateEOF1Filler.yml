CreateEOF1:

  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: '0x20000'
    currentGasLimit: "100000000"
    currentNumber: "1"
    currentTimestamp: "1000"
    previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6

  _info:
    comment: Covers EOF1C000, EOF1C001, EOF1C002, EOF1C003


  pre:

    # Legacy code
    0000000000000000000000000000000000c0de00:    
      balance: 0
      code: :raw 0x305000
      nonce: 1
      storage: {}


    # EOF code, 1 byte
    0000000000000000000000000000000000c0de01:    
      balance: 0
      code: :raw 0xEF00010100040200010001030000000000040000
      nonce: 1
      storage: {}


    # EOF code, 2 bytes
    0000000000000000000000000000000000c0de02:
      balance: 0
      code: :raw 0xEF0001010004020001000203000000000004003000
      nonce: 1
      storage: {}


    # EOF code, 3 bytes
    0000000000000000000000000000000000c0de03:
      balance: 0
      code: :raw 0xEF000101000402000100030300000000000001305000
      nonce: 1
      storage: {}


    # Legacy init code to create a contract that duplicates the code at a 
    # different address
    00000000000000000000000000000000add0add0:
      balance: 0
      code: |
        :yul {
           let addr := 0xADD0ADD0ADD0ADD0ADD0ADD0ADD0ADD0ADD0ADD0ADD0ADD0ADD0ADD0ADD0ADD0
           let len := extcodesize(addr)
           extcodecopy(addr, 0, 0, len)
           return(0, len)
        }
      nonce: 1
      storage: {}


    # EOF1 init code to create a contract that duplicates the code at a 
    # different address. Same code as add0add0, but EOF1-ized
    00000000000000000000000000000000add1add1:
      balance: 0
      code: :raw 0xEF0001010004020001003003000000000000067fadd0add0add0add0add0add0add0add0add0add0add0add0add0add0add0add0803b8060006000843c806000f35050
      nonce: 1
      storage: {}



    # Use an initializer (legacy or EOF1) to add a
    # contract (legacy of EOF1) using CREATE or CREATE2
    # CALLDATA:
    #   Byte 0: 00 - legacy initializer
    #           01 - EOF1 initializer
    #
    #   Byte 1: 00 - legacy contract
    #           01 - EOF1 contract
    #
    #   Byte 2: F0 - CREATE
    #           F5 - CREATE2

    000000000000000000000000000000000000add0:
      balance: 0
      code: |
        :yul {
           // get initAddr
           let initAddr := 0xADD1ADD1
           let codeAddrLoc := 20       // location inside the initializer
           if eq(and(calldataload(0),0xFF0000),0) {
              initAddr := 0xADD0ADD0
              codeAddrLoc := 1
           }

           // get codeAddr
           let codeAddr := 0xC0DE03
           if eq(and(calldataload(0),0x00FF00),0) {
              codeAddr := 0xC0DE00
           }
           
           let operation := and(calldataload(0),0xFF)

           // Just for debugging
           sstore(0x10, initAddr)
           sstore(0x11, codeAddr)
           sstore(0x12, operation)

           // Read the initializer
           let len := extcodesize(initAddr)
           extcodecopy(initAddr, 0, 0, len)

           // Write the correct code address
           mstore(codeAddrLoc, codeAddr)

           // Actually create the contract
           if eq(operation, 0xF0) {
              sstore(0, create(0, 0, len))
           }
           if eq(operation, 0xF5) {
              sstore(0, create2(0, 0, len, 0x5a17))
           }

           // Propagate failure by sending a value
           mstore(0, 0x0BAD)
           if eq(sload(0), 0) { return(0,0x20) }
        }
      nonce: 1
      storage: {}



    # The code add[01]add[01] returns when called directly
    # (just for sanity checks)
    ADD0ADD0ADD0ADD0ADD0ADD0ADD0ADD0ADD0ADD0:
      balance: 0
      nonce: 1
      storage: {}
      code: :raw 0xDEAD60A7




    # The contract the transaction calls
    cccccccccccccccccccccccccccccccccccccccc:
      balance: 0
      code: |
        :yul {
          let addr := calldataload(0x04)

          // Call with the second parameter, which encodes what CREATE we want to run
          mstore(0, calldataload(0x24))
          let ret := call(gas(), addr, 0, 0, 0x20, 0, 0)
 
          // Store the call's return value
          sstore(0, ret)
          
          // Store the returned data, if any (mostly for sanity checks)
          returndatacopy(0x40, 0, returndatasize())
          sstore(1, mload(0x40))
        }        
      nonce: 1
      storage: {}



    # User account
    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: '0x0ba1a9ce0ba1a9ce'
      code: 0x
      nonce: 1
      storage: {}


  transaction:
    data:
    - :label legacy      :abi f(uint) 0xc0de00
    - :label eof1-1byte  :abi f(uint) 0xc0de01
    - :label eof1-2bytes :abi f(uint) 0xc0de02
    - :label eof1-3bytes :abi f(uint) 0xc0de03
    - :label legacy-legacy-create  :abi f(uint,uint) 0xADD0 0x0000F0
    - :label legacy-legacy-create2 :abi f(uint,uint) 0xADD0 0x0000F5
    - :label legacy-eof1-create    :abi f(uint,uint) 0xADD0 0x0001F0
    - :label legacy-eof1-create2   :abi f(uint,uint) 0xADD0 0x0001F5
    - :label eof1-legacy-create    :abi f(uint,uint) 0xADD0 0x0100F0
    - :label eof1-legacy-create2   :abi f(uint,uint) 0xADD0 0x0100F5
    - :label eof1-eof1-create      :abi f(uint,uint) 0xADD0 0x0101F0
    - :label eof1-eof1-create2     :abi f(uint,uint) 0xADD0 0x0101F5
    # Sanity checks
    - :label sanity-legacy-init    :abi f(uint) 0xADD0ADD0
    - :label sanity-eof1-init      :abi f(uint) 0xADD1ADD1
    gasLimit:
    - 80000000
    gasPrice: 10
    nonce: 1
    to: cccccccccccccccccccccccccccccccccccccccc
    secretKey: "45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8"
    value:
    - 0

  expect:

    # Legacy, works always
    - indexes:
        data: 
        - :label legacy
        gas:  !!int -1
        value: !!int -1
      network:
        - Merge
        - '>=Shanghai'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
             0: 1


    # EOF1, always fails on Merge
    - indexes:
        data: 
        - :label eof1-1byte
        - :label eof1-2bytes
        - :label eof1-3bytes
        - :label sanity-eof1-init
        gas:  !!int -1
        value: !!int -1
      network:
        - Merge
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
             0: 0



    # EOF1 works with Shanghai
    - indexes:
        data: 
        - :label eof1-1byte
        - :label eof1-2bytes
        - :label eof1-3bytes
        gas: !!int -1
        value: !!int -1
      network:
        - '>=Shanghai'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
             0: 1


    # legacy init code and legacy contract code
    # Shouldn't care if we're Merge or Shanghai
    - indexes:
        data: 
        - :label legacy-legacy-create
        gas:  !!int -1
        value: !!int -1
      network:
        - Merge
        - '>=Shanghai'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
             0: 1

        # The adding contract
        000000000000000000000000000000000000add0:
          storage:
            0x00: 0xa7685ec0b42bf8b420dd66d94c973c7091d9706b  # New addr
            0x10: 0xadd0add0
            0x11: 0xc0de00
            0x12: 0xf0

        # Newly created account
        a7685ec0b42bf8b420dd66d94c973c7091d9706b:
          code: 0x305000



    # legacy init code and legacy contract code
    # Shouldn't care if we're Merge or Shanghai
    - indexes:
        data: 
        - :label legacy-legacy-create2
        gas:  !!int -1
        value: !!int -1
      network:
        - Merge
        - '>=Shanghai'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
             0: 1

        # The adding contract
        000000000000000000000000000000000000add0:
          storage:
            0x00: 0xb240aee9244aa6e21055d8ad0f817e91944c2969 # new addr
            0x10: 0xadd0add0
            0x11: 0xc0de00
            0x12: 0xf5

        # Newly created account
        b240aee9244aa6e21055d8ad0f817e91944c2969:
          code: 0x305000


    # All of these fail on Merge
    - indexes:
        data: 
        # Fail because we're trying to create a contract that starts with 0xEF.
        # That has been forbidden since London.
        - :label legacy-eof1-create
        - :label legacy-eof1-create2

        # Fail because EOF1 code starts with 0xEF, so Merge won't accept it
        - :label eof1-legacy-create
        - :label eof1-legacy-create2
        - :label eof1-eof1-create
        - :label eof1-eof1-create2
        gas:  !!int -1
        value: !!int -1
      network:
        - Merge
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
             0:      1
             1: 0x0BAD


    # EOF1 init code can't send a legacy contract
    - indexes:
        data: 
        - :label eof1-legacy-create
        - :label eof1-legacy-create2
        gas:  !!int -1
        value: !!int -1
      network:
        - '>=Shanghai'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
             0:      1
             1: 0x0BAD


    - indexes:
        data: 
        - :label legacy-eof1-create
        gas:  !!int -1
        value: !!int -1
      network:
        - '>=Shanghai'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
             0: 1

        000000000000000000000000000000000000add0:
          storage:
            0x00: 0xa7685ec0b42bf8b420dd66d94c973c7091d9706b
            0x10: 0xadd0add0   # Init code
            0x11: 0x00c0de03   # Contract code to duplicate
            0x12: 0x000000f0   # CREATE

        a7685ec0b42bf8b420dd66d94c973c7091d9706b:
            code: 0xef000101000402000100030300000000000001305000


    - indexes:
        data: 
        - :label legacy-eof1-create2
        gas:  !!int -1
        value: !!int -1
      network:
        - '>=Shanghai'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
             0: 1

        000000000000000000000000000000000000add0:
          storage:
            0x00: 0xb58d45549d2dd877e8af5045c75d2c8eb48101df
            0x10: 0xadd0add0   # Init code
            0x11: 0x00c0de03   # Contract code to duplicate
            0x12: 0x000000f5   # CREATE2

        b58d45549d2dd877e8af5045c75d2c8eb48101df:
            code: 0xef000101000402000100030300000000000001305000



    - indexes:
        data: 
        - :label eof1-eof1-create
        - :label eof1-eof1-create2
        gas:  !!int -1
        value: !!int -1
      network:
        - '>=Shanghai'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
             0: 1

        000000000000000000000000000000000000add0:
          storage:
            0x00: 0xb58d45549d2dd877e8af5045c75d2c8eb48101df
            0x10: 0xadd1add1   # Init code
            0x11: 0x00c0de03   # Contract code to duplicate
            0x12: 0x000000f0   # CREATE2

        b58d45549d2dd877e8af5045c75d2c8eb48101df:
            code: 0xef000101000402000100030300000000000001305000




    # Sanity checks, make sure that by default the init codes
    # return 0xDEAD60A7  
    - indexes:
        data: 
        - :label sanity-legacy-init
        - :label sanity-eof1-init
        gas:  !!int -1
        value: !!int -1
      network:
        - '>=Shanghai'
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
             0: 1
             1: 0xdead60a700000000000000000000000000000000000000000000000000000000


    # The legacy init code should also work on Merge
    - indexes:
        data: 
        - :label sanity-legacy-init
        gas:  !!int -1
        value: !!int -1
      network:
        - Merge
      result:
        cccccccccccccccccccccccccccccccccccccccc:
          storage:
             0: 1
             1: 0xdead60a700000000000000000000000000000000000000000000000000000000


